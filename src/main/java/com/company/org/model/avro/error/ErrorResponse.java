/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.company.org.model.avro.error;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ErrorResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 398917038176310779L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ErrorResponse\",\"namespace\":\"com.company.org.model.avro.error\",\"fields\":[{\"name\":\"timeStamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"error\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<ErrorResponse> ENCODER =
        new BinaryMessageEncoder<ErrorResponse>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<ErrorResponse> DECODER =
        new BinaryMessageDecoder<ErrorResponse>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<ErrorResponse> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<ErrorResponse> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<ErrorResponse>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this ErrorResponse to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a ErrorResponse from a ByteBuffer. */
    public static ErrorResponse fromByteBuffer(
        java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.String timeStamp;
    private int status;
    private java.lang.String error;
    private java.lang.String message;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public ErrorResponse() {}

    /**
     * All-args constructor.
     * @param timeStamp The new value for timeStamp
     * @param status The new value for status
     * @param error The new value for error
     * @param message The new value for message
     */
    public ErrorResponse(java.lang.String timeStamp, java.lang.Integer status, java.lang.String error, java.lang.String message) {
        this.timeStamp = timeStamp;
        this.status = status;
        this.error = error;
        this.message = message;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return timeStamp;
            case 1: return status;
            case 2: return error;
            case 3: return message;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: timeStamp = (java.lang.String)value$; break;
            case 1: status = (java.lang.Integer)value$; break;
            case 2: error = (java.lang.String)value$; break;
            case 3: message = (java.lang.String)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'timeStamp' field.
     * @return The value of the 'timeStamp' field.
     */
    public java.lang.String getTimeStamp() {
        return timeStamp;
    }

    /**
     * Sets the value of the 'timeStamp' field.
     * @param value the value to set.
     */
    public void setTimeStamp(java.lang.String value) {
        this.timeStamp = value;
    }

    /**
     * Gets the value of the 'status' field.
     * @return The value of the 'status' field.
     */
    public java.lang.Integer getStatus() {
        return status;
    }

    /**
     * Sets the value of the 'status' field.
     * @param value the value to set.
     */
    public void setStatus(java.lang.Integer value) {
        this.status = value;
    }

    /**
     * Gets the value of the 'error' field.
     * @return The value of the 'error' field.
     */
    public java.lang.String getError() {
        return error;
    }

    /**
     * Sets the value of the 'error' field.
     * @param value the value to set.
     */
    public void setError(java.lang.String value) {
        this.error = value;
    }

    /**
     * Gets the value of the 'message' field.
     * @return The value of the 'message' field.
     */
    public java.lang.String getMessage() {
        return message;
    }

    /**
     * Sets the value of the 'message' field.
     * @param value the value to set.
     */
    public void setMessage(java.lang.String value) {
        this.message = value;
    }

    /**
     * Creates a new ErrorResponse RecordBuilder.
     * @return A new ErrorResponse RecordBuilder
     */
    public static com.company.org.model.avro.error.ErrorResponse.Builder newBuilder() {
        return new com.company.org.model.avro.error.ErrorResponse.Builder();
    }

    /**
     * Creates a new ErrorResponse RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new ErrorResponse RecordBuilder
     */
    public static com.company.org.model.avro.error.ErrorResponse.Builder newBuilder(com.company.org.model.avro.error.ErrorResponse.Builder other) {
        return new com.company.org.model.avro.error.ErrorResponse.Builder(other);
    }

    /**
     * Creates a new ErrorResponse RecordBuilder by copying an existing ErrorResponse instance.
     * @param other The existing instance to copy.
     * @return A new ErrorResponse RecordBuilder
     */
    public static com.company.org.model.avro.error.ErrorResponse.Builder newBuilder(com.company.org.model.avro.error.ErrorResponse other) {
        return new com.company.org.model.avro.error.ErrorResponse.Builder(other);
    }

    /**
     * RecordBuilder for ErrorResponse instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ErrorResponse>
        implements org.apache.avro.data.RecordBuilder<ErrorResponse> {

        private java.lang.String timeStamp;
        private int status;
        private java.lang.String error;
        private java.lang.String message;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.company.org.model.avro.error.ErrorResponse.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.timeStamp)) {
                this.timeStamp = data().deepCopy(fields()[0].schema(), other.timeStamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.status)) {
                this.status = data().deepCopy(fields()[1].schema(), other.status);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.error)) {
                this.error = data().deepCopy(fields()[2].schema(), other.error);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.message)) {
                this.message = data().deepCopy(fields()[3].schema(), other.message);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing ErrorResponse instance
         * @param other The existing instance to copy.
         */
        private Builder(com.company.org.model.avro.error.ErrorResponse other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.timeStamp)) {
                this.timeStamp = data().deepCopy(fields()[0].schema(), other.timeStamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.status)) {
                this.status = data().deepCopy(fields()[1].schema(), other.status);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.error)) {
                this.error = data().deepCopy(fields()[2].schema(), other.error);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.message)) {
                this.message = data().deepCopy(fields()[3].schema(), other.message);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'timeStamp' field.
         * @return The value.
         */
        public java.lang.String getTimeStamp() {
            return timeStamp;
        }

        /**
         * Sets the value of the 'timeStamp' field.
         * @param value The value of 'timeStamp'.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder setTimeStamp(java.lang.String value) {
            validate(fields()[0], value);
            this.timeStamp = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'timeStamp' field has been set.
         * @return True if the 'timeStamp' field has been set, false otherwise.
         */
        public boolean hasTimeStamp() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'timeStamp' field.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder clearTimeStamp() {
            timeStamp = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'status' field.
         * @return The value.
         */
        public java.lang.Integer getStatus() {
            return status;
        }

        /**
         * Sets the value of the 'status' field.
         * @param value The value of 'status'.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder setStatus(int value) {
            validate(fields()[1], value);
            this.status = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'status' field has been set.
         * @return True if the 'status' field has been set, false otherwise.
         */
        public boolean hasStatus() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'status' field.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder clearStatus() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'error' field.
         * @return The value.
         */
        public java.lang.String getError() {
            return error;
        }

        /**
         * Sets the value of the 'error' field.
         * @param value The value of 'error'.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder setError(java.lang.String value) {
            validate(fields()[2], value);
            this.error = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'error' field has been set.
         * @return True if the 'error' field has been set, false otherwise.
         */
        public boolean hasError() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'error' field.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder clearError() {
            error = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'message' field.
         * @return The value.
         */
        public java.lang.String getMessage() {
            return message;
        }

        /**
         * Sets the value of the 'message' field.
         * @param value The value of 'message'.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder setMessage(java.lang.String value) {
            validate(fields()[3], value);
            this.message = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'message' field has been set.
         * @return True if the 'message' field has been set, false otherwise.
         */
        public boolean hasMessage() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'message' field.
         * @return This builder.
         */
        public com.company.org.model.avro.error.ErrorResponse.Builder clearMessage() {
            message = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public ErrorResponse build() {
            try {
                ErrorResponse record = new ErrorResponse();
                record.timeStamp = fieldSetFlags()[0] ? this.timeStamp : (java.lang.String) defaultValue(fields()[0]);
                record.status = fieldSetFlags()[1] ? this.status : (java.lang.Integer) defaultValue(fields()[1]);
                record.error = fieldSetFlags()[2] ? this.error : (java.lang.String) defaultValue(fields()[2]);
                record.message = fieldSetFlags()[3] ? this.message : (java.lang.String) defaultValue(fields()[3]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<ErrorResponse>
        WRITER$ = (org.apache.avro.io.DatumWriter<ErrorResponse>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
        throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<ErrorResponse>
        READER$ = (org.apache.avro.io.DatumReader<ErrorResponse>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
        throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
