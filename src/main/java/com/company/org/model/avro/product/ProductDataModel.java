/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.company.org.model.avro.product;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ProductDataModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 905103897512986946L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductDataModel\",\"namespace\":\"com.company.org.model.avro.product\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"current_price\",\"type\":{\"type\":\"record\",\"name\":\"CurrentPrice\",\"fields\":[{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"currency_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"USD\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProductDataModel> ENCODER =
      new BinaryMessageEncoder<ProductDataModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductDataModel> DECODER =
      new BinaryMessageDecoder<ProductDataModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ProductDataModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ProductDataModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductDataModel>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ProductDataModel to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ProductDataModel from a ByteBuffer. */
  public static ProductDataModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long id;
   private String name;
   private com.company.org.model.avro.product.CurrentPrice current_price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductDataModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param current_price The new value for current_price
   */
  public ProductDataModel(Long id, String name, com.company.org.model.avro.product.CurrentPrice current_price) {
    this.id = id;
    this.name = name;
    this.current_price = current_price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return current_price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: name = (String)value$; break;
    case 2: current_price = (com.company.org.model.avro.product.CurrentPrice)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'current_price' field.
   * @return The value of the 'current_price' field.
   */
  public com.company.org.model.avro.product.CurrentPrice getCurrentPrice() {
    return current_price;
  }

  /**
   * Sets the value of the 'current_price' field.
   * @param value the value to set.
   */
  public void setCurrentPrice(com.company.org.model.avro.product.CurrentPrice value) {
    this.current_price = value;
  }

  /**
   * Creates a new ProductDataModel RecordBuilder.
   * @return A new ProductDataModel RecordBuilder
   */
  public static com.company.org.model.avro.product.ProductDataModel.Builder newBuilder() {
    return new com.company.org.model.avro.product.ProductDataModel.Builder();
  }

  /**
   * Creates a new ProductDataModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductDataModel RecordBuilder
   */
  public static com.company.org.model.avro.product.ProductDataModel.Builder newBuilder(com.company.org.model.avro.product.ProductDataModel.Builder other) {
    return new com.company.org.model.avro.product.ProductDataModel.Builder(other);
  }

  /**
   * Creates a new ProductDataModel RecordBuilder by copying an existing ProductDataModel instance.
   * @param other The existing instance to copy.
   * @return A new ProductDataModel RecordBuilder
   */
  public static com.company.org.model.avro.product.ProductDataModel.Builder newBuilder(com.company.org.model.avro.product.ProductDataModel other) {
    return new com.company.org.model.avro.product.ProductDataModel.Builder(other);
  }

  /**
   * RecordBuilder for ProductDataModel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductDataModel>
    implements org.apache.avro.data.RecordBuilder<ProductDataModel> {

    private long id;
    private String name;
    private com.company.org.model.avro.product.CurrentPrice current_price;
    private com.company.org.model.avro.product.CurrentPrice.Builder current_priceBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.company.org.model.avro.product.ProductDataModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.current_price)) {
        this.current_price = data().deepCopy(fields()[2].schema(), other.current_price);
        fieldSetFlags()[2] = true;
      }
      if (other.hasCurrentPriceBuilder()) {
        this.current_priceBuilder = com.company.org.model.avro.product.CurrentPrice.newBuilder(other.getCurrentPriceBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ProductDataModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.company.org.model.avro.product.ProductDataModel other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.current_price)) {
        this.current_price = data().deepCopy(fields()[2].schema(), other.current_price);
        fieldSetFlags()[2] = true;
      }
      this.current_priceBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.company.org.model.avro.product.ProductDataModel.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.company.org.model.avro.product.ProductDataModel.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.company.org.model.avro.product.ProductDataModel.Builder setName(String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.company.org.model.avro.product.ProductDataModel.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'current_price' field.
      * @return The value.
      */
    public com.company.org.model.avro.product.CurrentPrice getCurrentPrice() {
      return current_price;
    }

    /**
      * Sets the value of the 'current_price' field.
      * @param value The value of 'current_price'.
      * @return This builder.
      */
    public com.company.org.model.avro.product.ProductDataModel.Builder setCurrentPrice(com.company.org.model.avro.product.CurrentPrice value) {
      validate(fields()[2], value);
      this.current_priceBuilder = null;
      this.current_price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'current_price' field has been set.
      * @return True if the 'current_price' field has been set, false otherwise.
      */
    public boolean hasCurrentPrice() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'current_price' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.company.org.model.avro.product.CurrentPrice.Builder getCurrentPriceBuilder() {
      if (current_priceBuilder == null) {
        if (hasCurrentPrice()) {
          setCurrentPriceBuilder(com.company.org.model.avro.product.CurrentPrice.newBuilder(current_price));
        } else {
          setCurrentPriceBuilder(com.company.org.model.avro.product.CurrentPrice.newBuilder());
        }
      }
      return current_priceBuilder;
    }

    /**
     * Sets the Builder instance for the 'current_price' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.company.org.model.avro.product.ProductDataModel.Builder setCurrentPriceBuilder(com.company.org.model.avro.product.CurrentPrice.Builder value) {
      clearCurrentPrice();
      current_priceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'current_price' field has an active Builder instance
     * @return True if the 'current_price' field has an active Builder instance
     */
    public boolean hasCurrentPriceBuilder() {
      return current_priceBuilder != null;
    }

    /**
      * Clears the value of the 'current_price' field.
      * @return This builder.
      */
    public com.company.org.model.avro.product.ProductDataModel.Builder clearCurrentPrice() {
      current_price = null;
      current_priceBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductDataModel build() {
      try {
        ProductDataModel record = new ProductDataModel();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (String) defaultValue(fields()[1]);
        if (current_priceBuilder != null) {
          record.current_price = this.current_priceBuilder.build();
        } else {
          record.current_price = fieldSetFlags()[2] ? this.current_price : (com.company.org.model.avro.product.CurrentPrice) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductDataModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductDataModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductDataModel>
    READER$ = (org.apache.avro.io.DatumReader<ProductDataModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
