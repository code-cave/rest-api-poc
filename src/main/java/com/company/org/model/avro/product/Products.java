/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.company.org.model.avro.product;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Products extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7922723857668630618L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Products\",\"namespace\":\"com.company.org.model.avro.product\",\"fields\":[{\"name\":\"products\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"_id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"current_price\",\"type\":{\"type\":\"record\",\"name\":\"CurrentPrice\",\"fields\":[{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"currency_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"USD\"}]}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Products> ENCODER =
      new BinaryMessageEncoder<Products>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Products> DECODER =
      new BinaryMessageDecoder<Products>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Products> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Products> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Products>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Products to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Products from a ByteBuffer. */
  public static Products fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<com.company.org.model.avro.product.Product> products;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Products() {}

  /**
   * All-args constructor.
   * @param products The new value for products
   */
  public Products(java.util.List<com.company.org.model.avro.product.Product> products) {
    this.products = products;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return products;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: products = (java.util.List<com.company.org.model.avro.product.Product>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'products' field.
   * @return The value of the 'products' field.
   */
  public java.util.List<com.company.org.model.avro.product.Product> getProducts() {
    return products;
  }

  /**
   * Sets the value of the 'products' field.
   * @param value the value to set.
   */
  public void setProducts(java.util.List<com.company.org.model.avro.product.Product> value) {
    this.products = value;
  }

  /**
   * Creates a new Products RecordBuilder.
   * @return A new Products RecordBuilder
   */
  public static com.company.org.model.avro.product.Products.Builder newBuilder() {
    return new com.company.org.model.avro.product.Products.Builder();
  }

  /**
   * Creates a new Products RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Products RecordBuilder
   */
  public static com.company.org.model.avro.product.Products.Builder newBuilder(com.company.org.model.avro.product.Products.Builder other) {
    return new com.company.org.model.avro.product.Products.Builder(other);
  }

  /**
   * Creates a new Products RecordBuilder by copying an existing Products instance.
   * @param other The existing instance to copy.
   * @return A new Products RecordBuilder
   */
  public static com.company.org.model.avro.product.Products.Builder newBuilder(com.company.org.model.avro.product.Products other) {
    return new com.company.org.model.avro.product.Products.Builder(other);
  }

  /**
   * RecordBuilder for Products instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Products>
    implements org.apache.avro.data.RecordBuilder<Products> {

    private java.util.List<com.company.org.model.avro.product.Product> products;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.company.org.model.avro.product.Products.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.products)) {
        this.products = data().deepCopy(fields()[0].schema(), other.products);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Products instance
     * @param other The existing instance to copy.
     */
    private Builder(com.company.org.model.avro.product.Products other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.products)) {
        this.products = data().deepCopy(fields()[0].schema(), other.products);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'products' field.
      * @return The value.
      */
    public java.util.List<com.company.org.model.avro.product.Product> getProducts() {
      return products;
    }

    /**
      * Sets the value of the 'products' field.
      * @param value The value of 'products'.
      * @return This builder.
      */
    public com.company.org.model.avro.product.Products.Builder setProducts(java.util.List<com.company.org.model.avro.product.Product> value) {
      validate(fields()[0], value);
      this.products = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'products' field has been set.
      * @return True if the 'products' field has been set, false otherwise.
      */
    public boolean hasProducts() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'products' field.
      * @return This builder.
      */
    public com.company.org.model.avro.product.Products.Builder clearProducts() {
      products = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Products build() {
      try {
        Products record = new Products();
        record.products = fieldSetFlags()[0] ? this.products : (java.util.List<com.company.org.model.avro.product.Product>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Products>
    WRITER$ = (org.apache.avro.io.DatumWriter<Products>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Products>
    READER$ = (org.apache.avro.io.DatumReader<Products>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
